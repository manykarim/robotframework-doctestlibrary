name: CI

on: [push, pull_request]

jobs:

  test:
    runs-on: ubuntu-latest
    strategy:
          matrix:
            python-version: ["3.8", "3.11", "3.12", "3.13"]
          fail-fast: false
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Packages and Binaries
        run: |
          sudo apt-get update
          echo "Install Dependencies via apt"
          sudo apt-get install -y imagemagick tesseract-ocr ghostscript libdmtx0b libzbar0
          echo "Download Tesseract Models"
          sudo wget -O /usr/share/tesseract-ocr/4.00/tessdata/eng.traineddata https://github.com/tesseract-ocr/tessdata/blob/main/eng.traineddata?raw=true
          sudo wget -O /usr/share/tesseract-ocr/4.00/tessdata/osd.traineddata https://github.com/tesseract-ocr/tessdata/blob/main/osd.traineddata?raw=true
          echo "Download Ghostscript and GhostPCL"
          export release_name=gs9561
          export archive_name=ghostpcl-9.56.1-linux-x86_64
          wget https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/${release_name}/${archive_name}.tgz
          tar -xvzf ${archive_name}.tgz
          chmod +x ${archive_name}/gpcl6*
          cp ${archive_name}/gpcl6* ${archive_name}/pcl6
          sudo cp ${archive_name}/* /usr/bin
          sudo cp policy.xml /etc/ImageMagick-6/
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.virtualenvs
          installer-parallel: true
      - name: Install dependencies
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Run tests
        run: |
          poetry run invoke tests
      - name: Store Artifact
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: test-results ${{ matrix.python-version }} # Choose a descriptive name for your artifact
          path: |
            results/report.html
            results/log.html
            results/output.xml
            results/pytest.xml
            results/xunit.xml
      - name: Test Report
        uses: dorny/test-reporter@main
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: xUnit Tests ${{ matrix.python-version }}            # Name of the check run which will be created
          path: results/pytest.xml,results/xunit.xml    # Path to test results
          reporter: java-junit        # Format of test results
          
