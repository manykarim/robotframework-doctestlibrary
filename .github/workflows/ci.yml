name: CI

on: [push, pull_request]

jobs:
  smoke-no-ai:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Packages and Binaries
        run: |
          sudo apt-get update
          echo "Install Dependencies via apt"
          sudo apt-get install -y imagemagick tesseract-ocr ghostscript libdmtx0b libzbar0
          echo "Download Ghostscript and GhostPCL"
          export release_name=gs9561
          export archive_name=ghostpcl-9.56.1-linux-x86_64
          wget https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/${release_name}/${archive_name}.tgz
          tar -xvzf ${archive_name}.tgz
          chmod +x ${archive_name}/gpcl6*
          cp ${archive_name}/gpcl6* ${archive_name}/pcl6
          sudo cp ${archive_name}/* /usr/bin
          sudo cp policy.xml /etc/ImageMagick-6/
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.5
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.virtualenvs
          installer-parallel: true
      - name: Install base dependencies (without AI extras)
        run: poetry install
      - name: Run smoke end-to-end tests without AI extras
        run: |
          poetry run robot \
            --loglevel=TRACE:INFO \
            --listener RobotStackTracer \
            --xunit xunit.xml \
            -d results-smoke \
            atest/Compare.robot \
            atest/PdfContent.robot
      - name: Store Smoke Artifacts
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: smoke-results
          path: |
            results-smoke/*.html
            results-smoke/output.xml
            results-smoke/xunit.xml
      - name: Smoke Test Report
        uses: dorny/test-reporter@main
        if: success() || failure()
        with:
          name: Smoke Tests
          path: results-smoke/xunit.xml
          reporter: java-junit

  test:
    needs: smoke-no-ai
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DOCTEST_LLM_MODEL: ${{ vars.DOCTEST_LLM_MODEL }}
      DOCTEST_LLM_VISION_MODEL: ${{ vars.DOCTEST_LLM_VISION_MODEL }}
      DOCTEST_LLM_PROVIDER: ${{ vars.DOCTEST_LLM_PROVIDER }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Packages and Binaries
        run: |
          sudo apt-get update
          echo "Install Dependencies via apt"
          sudo apt-get install -y imagemagick tesseract-ocr ghostscript libdmtx0b libzbar0
          echo "Download Ghostscript and GhostPCL"
          export release_name=gs9561
          export archive_name=ghostpcl-9.56.1-linux-x86_64
          wget https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/${release_name}/${archive_name}.tgz
          tar -xvzf ${archive_name}.tgz
          chmod +x ${archive_name}/gpcl6*
          cp ${archive_name}/gpcl6* ${archive_name}/pcl6
          sudo cp ${archive_name}/* /usr/bin
          sudo cp policy.xml /etc/ImageMagick-6/
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.5
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.virtualenvs
          installer-parallel: true
      - name: Install dependencies
        run: poetry install --extras ai
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Run tests
        run: |
          poetry run invoke tests
      - name: Store Artifact
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-results ${{ matrix.python-version }} # Choose a descriptive name for your artifact
          path: |
            results/*.html
            results/*.xml
            results/htmlcov/
            results/*.prof
            results/*.txt
            results/screenshots/
      - name: Test Report
        uses: dorny/test-reporter@main
        if: success() || failure() # run this step even if previous step failed
        with:
          name: xUnit Tests ${{ matrix.python-version }} # Name of the check run which will be created
          path: results/pytest.xml,results/xunit.xml # Path to test results
          reporter: java-junit # Format of test results

